use std::error::Error;

use clap::{self, Parser, Subcommand};
use clio::ClioPath;

mod build;
mod gen;
mod image_data;
mod output;
mod paths;
mod scan;
mod scanner;
mod static_file_data;

/// Tool for diagnosing Terraria Resource Packs.
#[derive(Parser)]
#[clap(name = "TPack Diagnostic", version)]
struct CliArgs {
    #[command(subcommand)]
    action: Command,
}

#[derive(Subcommand)]
enum Command {
    /// Generates a set of reference files from extracted game assets.
    ///
    /// The "extracted game assets" are assumed to be sprite, sound and wave
    /// bank assets extracted with TConvert, plus a file called `Loc.csv`
    /// containing all of the game's translations.
    Gen {
        /// The root dir of the extracted files.
        #[clap( short, long, value_parser = clap::value_parser!(ClioPath).exists().is_dir())]
        input: ClioPath,

        /// Dir for the reference files to be dumped into.
        #[clap( short, long, value_parser = clap::value_parser!(ClioPath).exists().is_dir())]
        output: ClioPath,
    },

    /// Scans the Resource Pack and gives a diagnostic of it.
    /// 
    /// ## Notes about scanning localization files
    /// 
    /// Currently, the scanner can only read CSV files, can't tell different
    /// languages apart, and can't notice duplicate entries.
    /// 
    /// Also, entries where the first character of the first field is `#`
    /// are ignored.
    Scan {
        /// The root dir of the extracted files.
        #[clap(short, long, value_parser = clap::value_parser!(ClioPath).exists().is_dir())]
        input: ClioPath,

        /// Dir of the reference files generated by `gen`.
        #[clap(short, long, value_parser = clap::value_parser!(ClioPath).exists().is_dir())]
        reference: ClioPath,
    },

    /// Creates a copy of your Resource Pack with only valid files, preparing it
    /// for uploading.
    /// 
    /// Currently does not properly validate localization files.
    Build {
        /// Root dir of the Resource Pack.
        #[clap(short, long, value_parser = clap::value_parser!(ClioPath).exists().is_dir())]
        input: ClioPath,

        /// Root dir of the copy.
        #[clap(short, long, value_parser = clap::value_parser!(ClioPath).exists().is_dir())]
        output: ClioPath,

        /// Dir of the reference files generated by `gen`.
        #[clap(short, long, value_parser = clap::value_parser!(ClioPath).exists().is_dir())]
        reference: ClioPath,
    },
}

fn main() -> Result<(), Box<dyn Error>> {
    let args = CliArgs::parse();
    output::info("Started diagnostic.");

    match args.action {
        Command::Gen { input, output } => {
            gen::generate_references(&input.to_path_buf(), &output.to_path_buf())?;
        }
        Command::Scan { input, reference } => {
            scan::scan_resource_pack(&input.to_path_buf(), &reference.to_path_buf())?;
        }
        Command::Build { input, output, reference } => {
            build::build_resource_pack(
                &input.to_path_buf(),
                &output.to_path_buf(),
                &reference.to_path_buf(),
            )?;
        }
    }

    output::info("Diagnostic complete!");
    Ok(())
}
